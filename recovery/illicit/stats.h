#ifndef __STATS_H
#define __STATS_H


#include "hashes.h"
#include "hud.h"
#include "licensing.h"
#include "messages.h"
#include "misc.h"
#include "natives.h"
#include "weapons.h"

using namespace Dialog;
using namespace Hashes;
using namespace Hud;
using namespace Keyboard;
using namespace Licensing;
using namespace Misc;
using namespace Natives;



namespace Stats_f
{

	void SetTunable(int index, int value)
	{
		int address = (*(int*)0x1E70374) + 4;
		{
			if (address != 0)
			{
				int temp = address;
				temp += (index * 4);
				*(int*)temp = value;
			}
		}
	}

	void SetStatInt(Hash stat, int value, int save)
	{
		//STAT_SET_INT(GET_HASH_KEY("MP0_BAD_SPORT_BITSET"), 0, 0);
	}

	void SetStatBool(Hash stat, int value, int save)
	{
		//STAT_SET_BOOL(GET_HASH_KEY("MP0_BAD_SPORT_BITSET"), 0, 0);
	}

	// Disable 1.26 Anti-Ban
	void DisableAntiCheat(int dummy)
	{
		//
		PrintText("Attempting To ~r~Disable ~w~Known ~y~1.26 Anti-Cheat ~w~Functions", 3000);
	}

	// Disable Idle Kick
	void DisableIdleKick(int dummy)
	{
		SetTunable(73, 0x3B9ACA00);
		SetTunable(74, 0x3B9ACA00);
		SetTunable(75, 0x3B9ACA00);
		SetTunable(76, 0x3B9ACA00);
		PrintText("Idle Kick ~r~Disabled", 3000);
	}

	// Enable Free Shopping
	void FreeShopping(int dummy)
	{
		SetTunable(60, 0x00000000);
		SetTunable(61, 0x00000000);
		SetTunable(62, 0x00000000);
		SetTunable(63, 0x00000000);
		SetTunable(65, 0x00000000);
		SetTunable(66, 0x00000000);
		SetTunable(67, 0x00000000);
		SetTunable(68, 0x00000000);
		SetTunable(69, 0x00000000);
		PrintText("Free Shopping ~g~Enabled", 3000);
	}

	

	// Remove Bad Sport
	void RemoveBadSport(int dummy)
	{
		SetTunable(119, 0x00000000);
		SetTunable(120, 0x00000000);
		SetTunable(121, 0x00000000);
		SetTunable(122, 0x00000000);
		SetTunable(123, 0x00000000);
		SetTunable(124, 0x00000000);
		SetTunable(125, 0x00000000);
		SetTunable(126, 0x00000000);
		SetTunable(127, 0x00000000);
		SetTunable(128, 0x00000000);
		
		STAT_SET_INT(GET_HASH_KEY("MP0_BAD_SPORT_BITSET"), 0, 0);
		STAT_SET_INT(GET_HASH_KEY("MP0_MPPLY_WAS_I_BAD_SPORT"), 0, 0);
		STAT_SET_INT(GET_HASH_KEY("MP0_MPPLY_OVERALL_BADSPORT"), 0, 0);
		STAT_SET_INT(GET_HASH_KEY("MP0_MPPLY_CHAR_IS_BADSPORT"), 0, 0);
		STAT_SET_INT(GET_HASH_KEY("MP0_MPPLY_BECAME_BADSPORT_NUM"), 0, 0);
		STAT_SET_INT(GET_HASH_KEY("MP0_MPPLY_DESTROYED_PVEHICLES"), 0, 0);
		STAT_SET_INT(GET_HASH_KEY("MPPLY_REPORT_STRENGTH"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MPPLY_COMMEND_STRENGTH"), 100, 1);
		STAT_SET_INT(GET_HASH_KEY("MPPLY_FRIENDLY"), 100, 1);
		STAT_SET_INT(GET_HASH_KEY("MPPLY_HELPFUL"), 100, 1);
		STAT_SET_INT(GET_HASH_KEY("MPPLY_GRIEFING"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MPPLY_VC_ANNOYINGME"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MPPLY_VC_HATE"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MPPLY_OFFENSIVE_LANGUAGE"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MPPLY_OFFENSIVE_TAGPLATE"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MPPLY_OFFENSIVE_UGC"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MPPLY_BAD_CREW_NAME"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MPPLY_BAD_CREW_MOTTO"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MPPLY_BAD_CREW_STATUS"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MPPLY_BAD_CREW_EMBLEM"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MPPLY_GAME_EXPLOITS"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MPPLY_EXPLOITS"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MPPLY_ISPUNISHED"), 0, 1);
		
		PrintText("Bad Sport ~r~Removed", 3000);
	}

	// Clear Mental State
	void ClearMentalState(int dummy)
	{
		STAT_SET_FLOAT(GET_HASH_KEY("PLAYER_MENTAL_STATE"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_PLAYER_MENTAL_STATE"), 0, 1);
		PrintText("Mental State ~g~Cleared", 3000);
	}
		
	// 100% Skills
	void MaxAllSkills(int dummy)
	{
		
		STAT_SET_INT(GET_HASH_KEY("MP0_SCRIPT_INCREASE_STAM"), 100, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_SCRIPT_INCREASE_STRN"), 100, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_SCRIPT_INCREASE_LUNG"), 100, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_SCRIPT_INCREASE_DRIV"), 100, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_SCRIPT_INCREASE_FLY"), 100, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_SCRIPT_INCREASE_SHO"), 100, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_SCRIPT_INCREASE_STL"), 100, 1);
		
		PrintText("All Skills ~g~100%", 3000);
	}





	// Unlockables
		
	// Unlock All Heists
	void UnlockAllHeists(int dummy)
	{
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_FM_VEHICLE_1_UNLCK"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_FM_VEHICLE_2_UNLCK"), -1, 1);

		PrintText("All Heists ~g~Unlocked", 3000);
	}
		
	// Unlock Heist Vehicles
	void UnlockHeistVehicles(int dummy)
	{
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_FM_VEHICLE_1_UNLCK"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_FM_VEHICLE_2_UNLCK"), -1, 1);

		PrintText("Heist Vehicles ~g~Unlocked", 3000);
	}
		
	// Unlock All Heist Trophies
	void UnlockAllHeistTrophies(int dummy)
	{
		STAT_SET_INT(GET_HASH_KEY("MPPLY_HEIST_ACH_TRACKER"), -1, 1);

		PrintText("All Heist Trophies ~g~Unlocked", 3000);
	}
		
	// Unlock All Camos and Parachutes
	void UnlockAllCamosParachutes(int dummy)
	{
		
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_KIT_1_FM_UNLCK"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_KIT_2_FM_UNLCK"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_KIT_3_FM_UNLCK"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_KIT_4_FM_UNLCK"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_KIT_5_FM_UNLCK"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_KIT_6_FM_UNLCK"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_KIT_7_FM_UNLCK"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_KIT_8_FM_UNLCK"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_KIT_9_FM_UNLCK"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_KIT_10_FM_UNLCK"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_KIT_11_FM_UNLCK"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_KIT_12_FM_UNLCK"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_KIT_FM_PURCHASE"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_KIT_FM_PURCHASE2"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_KIT_FM_PURCHASE3"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_KIT_FM_PURCHASE4"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_KIT_FM_PURCHASE5"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_KIT_FM_PURCHASE6"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_KIT_FM_PURCHASE7"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_KIT_FM_PURCHASE8"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_KIT_FM_PURCHASE9"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_KIT_FM_PURCHASE10"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_KIT_FM_PURCHASE11"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_KIT_FM_PURCHASE12"), -1, 1);
		
		PrintText("All Camos and Parachutes ~g~Unlocked", 3000);
	}
		
	// Unlock All Free Chrome Rims
	void UnlockFreeChromeRims(int dummy)
	{
		STAT_SET_INT(GET_HASH_KEY("AWD_WIN_CAPTURES"), 50, 1);                // Chrome Rims - Sport
        STAT_SET_INT(GET_HASH_KEY("AWD_DROPOFF_CAP_PACKAGES"), 100, 1);       // Chrome Rims - Lowrider
        STAT_SET_INT(GET_HASH_KEY("AWD_KILL_CARRIER_CAPTURE"), 100, 1);       // Chrome Rims - Offroad
        STAT_SET_INT(GET_HASH_KEY("AWD_FINISH_HEISTS"), 50, 1);               // Chrome Rims - High End
        STAT_SET_INT(GET_HASH_KEY("AWD_FINISH_HEIST_SETUP_JOB"), 50, 1);      // Chrome Rims - Tuner
        STAT_SET_INT(GET_HASH_KEY("AWD_NIGHTVISION_KILLS"), 100, 1);          // Chrome Rims - Bike
        STAT_SET_INT(GET_HASH_KEY("AWD_WIN_LAST_TEAM_STANDINGS"), 50, 1);     // Chrome Rims - SUV
        STAT_SET_INT(GET_HASH_KEY("AWD_ONLY_PLAYER_ALIVE_LTS"), 50, 1);       // Chrome Rims - Muscle
		PrintText("All Free Chrome Rims ~g~Unlocked", 3000);
	}
		
	// Unlock All Exclusive T-shirts
	void UnlockExclusiveTshirts(int dummy)
	{
		STAT_SET_INT(GET_HASH_KEY("AWD_FMHORDWAVESSURVIVE"), 10, 1);          // Red Skull
		STAT_SET_INT(GET_HASH_KEY("AWD_FMPICKUPDLCCRATE1ST"), 1, 1);          // Los Santos Belle 
		STAT_SET_INT(GET_HASH_KEY("AWD_WIN_CAPTURE_DONT_DYING"), 25, 1);      // Death Defying
		STAT_SET_INT(GET_HASH_KEY("AWD_DO_HEIST_AS_MEMBER"), 25, 1);          // For Hire
		STAT_SET_INT(GET_HASH_KEY("AWD_PICKUP_CAP_PACKAGES"), 100, 1);        // Gimme That
		STAT_SET_BOOL(GET_HASH_KEY("AWD_FINISH_HEIST_NO_DAMAGE"), 1, 1);      // Can't Touch This
		STAT_SET_INT(GET_HASH_KEY("AWD_WIN_GOLD_MEDAL_HEISTS"), 25, 1);       // Decorated
		STAT_SET_INT(GET_HASH_KEY("AWD_KILL_TEAM_YOURSELF_LTS"), 25, 1);      // One Man Army
		STAT_SET_INT(GET_HASH_KEY("AWD_KILL_PSYCHOPATHS"), 100, 1);           // Psycho
		STAT_SET_INT(GET_HASH_KEY("AWD_DO_HEIST_AS_THE_LEADER"), 25, 1);      // Shot Caller
		STAT_SET_BOOL(GET_HASH_KEY("AWD_STORE_20_CAR_IN_GARAGES"), 1, 1);     // Showroom
		// MISSING: Rockstar, Elite Challenge
		
		PrintText("All Exclusive T-Shirts ~g~Unlocked", 3000);
	}
		
	// Unlock All Vehicle Mods LSC
	void UnlockAllVehicleMods(int dummy)
	{
		
		STAT_SET_INT(GET_HASH_KEY("MP0_RACES_WON"), 50, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_FM_CARMOD_1_UNLCK"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_FM_CARMOD_2_UNLCK"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_FM_CARMOD_3_UNLCK"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_FM_CARMOD_4_UNLCK"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_FM_CARMOD_5_UNLCK"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_FM_CARMOD_6_UNLCK"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_FM_CARMOD_7_UNLCK"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_FMRALLYWONDRIVE"), 1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_FMRALLYWONNAV"), 1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_FMWINSEARACE"), 1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_FMWINAIRRACE"), 1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_NUMBER_TURBO_STARTS_IN_RACE"), 50, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_USJS_COMPLETED"), 50, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_FM_RACES_FASTEST_LAP"), 50, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_NUMBER_SLIPSTREAMS_IN_RACE"), 100, 1);
		
		PrintText("All LSC Vehicle Mods ~g~Unlocked", 3000);
	}
		
	// Unlock All Trophies and Awards
	void UnlockAllTrophysAwards(int dummy)
	{
		
		STAT_SET_INT(GET_HASH_KEY("MP0_PLAYER_HEADSHOTS"), 500, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_PISTOL_ENEMY_KILLS"), 500, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_SAWNOFF_ENEMY_KILLS"), 500, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_MICROSMG_ENEMY_KILLS"), 500, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_SNIPERRFL_ENEMY_KILLS"), 100, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_UNARMED_ENEMY_KILLS"), 50, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_STKYBMB_ENEMY_KILLS"), 50, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_GRENADE_ENEMY_KILLS"), 50, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_RPG_ENEMY_KILLS"), 50, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CARS_EXPLODED"), 500, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_5STAR_WANTED_AVOIDANCE"), 50, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_CAR_BOMBS_ENEMY_KILLS"), 25, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_CARS_EXPORTED"), 50, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_PASS_DB_PLAYER_KILLS"), 100, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_FM_DM_WINS"), 50, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_FM_GOLF_WON"), 25, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_FM_GTA_RACES_WON"), 50, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_FM_SHOOTRANG_CT_WON"), 25, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_FM_SHOOTRANG_RT_WON"), 25, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_FM_SHOOTRANG_TG_WON"), 25, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_FM_TDM_WINS"), 50, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_FM_TENNIS_WON"), 25, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_MOST_SPINS_IN_ONE_JUMP"), 5, 1);
		STAT_SET_INT(GET_HASH_KEY("MPPLY_AWD_FM_CR_DM_MADE"), 25, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_FMHORDWAVESSURVIVE"), 10, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_HOLD_UP_SHOPS"), 20, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_ASLTRIFLE_ENEMY_KILLS"), 500, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_MG_ENEMY_KILLS"), 500, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_LAPDANCES"), 25, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_MOST_ARM_WRESTLING_WINS"), 25, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_NO_HAIRCUTS"), 25, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_RACES_WON"), 50, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_SECURITY_CARS_ROBBED"), 25, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_VEHICLES_JACKEDR"), 500, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_MOST_FLIPS_IN_ONE_JUMP"), 5, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_WIN_AT_DARTS"), 25, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_PASSENGERTIME"), 4, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_TIME_IN_HELICOPTER"), 4, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_FM_DM_3KILLSAMEGUY"), 50, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_FM_DM_KILLSTREAK"), 100, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_FM_DM_STOLENKILL"), 50, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_FM_DM_TOTALKILLS"), 500, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_FM_GOLF_BIRDIES"), 25, 1);
		STAT_SET_BOOL(GET_HASH_KEY("MP0_AWD_FM_GOLF_HOLE_IN_1"), 1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_FM_RACE_LAST_FIRST, 25"), 1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_FM_RACES_FASTEST_LAP, 25"), 1, 1);
		STAT_SET_BOOL(GET_HASH_KEY("MP0_AWD_FM_SHOOTRANG_GRAN_WON"), 1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_FM_TDM_MVP"), 50, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_FM_TENNIS_ACE"), 25, 1);
		STAT_SET_BOOL(GET_HASH_KEY("MP0_AWD_FM_TENNIS_STASETWIN"), 1, 1);
		STAT_SET_BOOL(GET_HASH_KEY("MP0_AWD_FM6DARTCHKOUT"), 1, 1);
		STAT_SET_BOOL(GET_HASH_KEY("MP0_AWD_FMATTGANGHQ"), 1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_PARACHUTE_JUMPS_20M"), 25, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_PARACHUTE_JUMPS_50M"), 25, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AIR_LAUNCHES_OVER_40M"), 25, 1);
		STAT_SET_BOOL(GET_HASH_KEY("MP0_AWD_BUY_EVERY_GUN"), 1, 1);
		STAT_SET_BOOL(GET_HASH_KEY("MP0_AWD_FMWINEVERYGAMEMODE"), 1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_FMDRIVEWITHOUTCRASH"), 255, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_FMCRATEDROPS"), 25, 1);
		STAT_SET_BOOL(GET_HASH_KEY("MP0_AWD_FM25DIFFERENTDM"), 1, 1);
		STAT_SET_BOOL(GET_HASH_KEY("MP0_AWD_FM_TENNIS_5_SET_WINS"), 1, 1);
		STAT_SET_INT(GET_HASH_KEY("MPPLY_AWD_FM_CR_PLAYED_BY_PEEP"), 100, 1);
		STAT_SET_INT(GET_HASH_KEY("MPPLY_AWD_FM_CR_RACES_MADE"), 25, 1);
		STAT_SET_BOOL(GET_HASH_KEY("MP0_AWD_FM25DIFFERENTRACES"), 1, 1);
		STAT_SET_BOOL(GET_HASH_KEY("MP0_AWD_FM25DIFITEMSCLOTHES"), 1, 1);
		STAT_SET_BOOL(GET_HASH_KEY("MP0_AWD_FMFULLYMODDEDCAR"), 1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_FMKILLBOUNTY"), 25, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_KILLS_PLAYERS"), 1000, 1);
		STAT_SET_BOOL(GET_HASH_KEY("MP0_AWD_FMPICKUPDLCCRATE1ST"), 1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_FMSHOOTDOWNCOPHELI"), 25, 1);
		STAT_SET_BOOL(GET_HASH_KEY("MP0_AWD_FMKILL3ANDWINGTARACE"), 1, 1);
		STAT_SET_BOOL(GET_HASH_KEY("MP0_AWD_FMKILLSTREAKSDM"), 1, 1);
		STAT_SET_BOOL(GET_HASH_KEY("MP0_AWD_FMMOSTKILLSGANGHIDE"), 1, 1);
		STAT_SET_BOOL(GET_HASH_KEY("MP0_AWD_FMMOSTKILLSSURVIVE"), 1, 1);
		STAT_SET_BOOL(GET_HASH_KEY("MP0_AWD_FMRACEWORLDRECHOLDER"), 1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_FMRALLYWONDRIVE"), 25, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_FMRALLYWONNAV"), 25, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_FMREVENGEKILLSDM"), 50, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_FMWINAIRRACE"), 25, 1);
		STAT_SET_BOOL(GET_HASH_KEY("MP0_AWD_FMWINCUSTOMRACE"), 1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_FMWINRACETOPOINTS"), 25, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_FMWINSEARACE"), 25, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_FMBASEJMP"), 25, 1);
		STAT_SET_BOOL(GET_HASH_KEY("MP0_MP0_AWD_FMWINALLRACEMODES"), 1, 1);
		STAT_SET_BOOL(GET_HASH_KEY("MP0_AWD_FMTATTOOALLBODYPARTS"), 1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_WANTED_LEVEL_TIME5STAR"), 2147483647, 1);
		STAT_SET_FLOAT(GET_HASH_KEY("MP0_LONGEST_WHEELIE_DIST"), 1000, 1);
		
		PrintText("All Trophies and Awards ~g~Unlocked", 3000);
	}
		
	// Unlock All Hairstyles
	void UnlockAllHairstyles(int dummy)
	{
		
		STAT_SET_INT(GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_1"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_2"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_3"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_4"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_5"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_6"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_7"), -1, 1);
		
		PrintText("All Hairstyles ~g~Unlocked", 3000);
	}
		
	// Unlock All Tattoos
	void UnlockAllTattoos(int dummy)
	{
		
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_FM_DM_WINS"), 50, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_FM_TDM_MVP"), 50, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_FM_DM_TOTALKILLS"), 500, 1);
		STAT_SET_BOOL(GET_HASH_KEY("MP0_AWD_FMATTGANGHQ"), 1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_FMBBETWIN"), 50000, 1);
		STAT_SET_BOOL(GET_HASH_KEY("MP0_AWD_FMWINEVERYGAMEMODE"), 1, 1);
		STAT_SET_BOOL(GET_HASH_KEY("MP0_AWD_FMRACEWORLDRECHOLDER"), 1, 1);
		STAT_SET_BOOL(GET_HASH_KEY("MP0_AWD_FMFULLYMODDEDCAR"), 1, 1);
		STAT_SET_BOOL(GET_HASH_KEY("MP0_AWD_FMMOSTKILLSSURVIVE"), 1, 1);
		STAT_SET_BOOL(GET_HASH_KEY("MP0_AWD_FMKILL3ANDWINGTARACE"), 1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_FMKILLBOUNTY"), 25, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_FMREVENGEKILLSDM"), 50, 1);
		STAT_SET_BOOL(GET_HASH_KEY("MP0_AWD_FMKILLSTREAKSDM"), 1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_HOLD_UP_SHOPS"), 20, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_LAPDANCES"), 25, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_SECURITY_CARS_ROBBED"), 25, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_RACES_WON"), 50, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_AWD_CAR_BOMBS_ENEMY_KILLS"), 25, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_PLAYER_HEADSHOTS"), 500, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_DB_PLAYER_KILLS"), 1000, 1);
		
		PrintText("All Tattoos ~g~Unlocked", 3000);
	}





	// Give Stuff
		
	// Give Snacks
	void GiveSnacks(int dummy)
	{
		int amount = 99;
		
		STAT_SET_INT(GET_HASH_KEY("MP0_NO_BOUGHT_YUM_SNACKS"), amount, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_NO_BOUGHT_HEALTH_SNACKS"), amount, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_NO_BOUGHT_EPIC_SNACKS"), amount, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_NUMBER_OF_ORANGE_BOUGHT"), amount, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CIGARETTES_BOUGHT"), amount, 1);

		char tmpMsg[40];
		sprintf(tmpMsg, "Gave ~b~%i ~w~Snacks", amount);
		PrintText(tmpMsg, 3000);
		
	}
		
	// Give Armor
	void GiveArmor(int dummy)
	{
		int amount = 99;
		
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_ARMOUR_1_COUNT"), amount, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_ARMOUR_2_COUNT"), amount, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_ARMOUR_3_COUNT"), amount, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_ARMOUR_4_COUNT"), amount, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_ARMOUR_5_COUNT"), amount, 1);

		char tmpMsg[40];
		sprintf(tmpMsg, "Gave ~b~%i ~w~Armor", amount);
		PrintText(tmpMsg, 3000);
		
	}
		
	// Give Fireworks
	void GiveFireworks(int dummy)
	{
		int amount = 99;
		
		STAT_SET_INT(GET_HASH_KEY("MP0_FIREWORK_TYPE_1_WHITE"), amount, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_FIREWORK_TYPE_1_RED"), amount, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_FIREWORK_TYPE_1_BLUE"), amount, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_FIREWORK_TYPE_2_WHITE"), amount, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_FIREWORK_TYPE_2_RED"), amount, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_FIREWORK_TYPE_2_BLUE"), amount, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_FIREWORK_TYPE_3_WHITE"), amount, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_FIREWORK_TYPE_3_RED"), amount, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_FIREWORK_TYPE_3_BLUE"), amount, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_FIREWORK_TYPE_4_WHITE"), amount, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_FIREWORK_TYPE_4_RED"), amount, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_FIREWORK_TYPE_4_BLUE"), amount, 1);
		

		/*
		STAT_SET_INT(GET_HASH_KEY("MP1_FIREWORK_TYPE_1_WHITE"), amount, 1);
		STAT_SET_INT(GET_HASH_KEY("MP1_FIREWORK_TYPE_2_WHITE"), amount, 1);
		STAT_SET_INT(GET_HASH_KEY("MP1_FIREWORK_TYPE_3_WHITE"), amount, 1);
		STAT_SET_INT(GET_HASH_KEY("MP1_FIREWORK_TYPE_4_WHITE"), amount, 1);
		STAT_SET_INT(GET_HASH_KEY("MP1_FIREWORK_TYPE_1_RED"), amount, 1);
		STAT_SET_INT(GET_HASH_KEY("MP1_FIREWORK_TYPE_2_RED"), amount, 1);
		STAT_SET_INT(GET_HASH_KEY("MP1_FIREWORK_TYPE_3_RED"), amount, 1);
		STAT_SET_INT(GET_HASH_KEY("MP1_FIREWORK_TYPE_4_RED"), amount, 1);
		STAT_SET_INT(GET_HASH_KEY("MP1_FIREWORK_TYPE_1_BLUE"), amount, 1);
		STAT_SET_INT(GET_HASH_KEY("MP1_FIREWORK_TYPE_2_BLUE"), amount, 1);
		STAT_SET_INT(GET_HASH_KEY("MP1_FIREWORK_TYPE_3_BLUE"), amount, 1);
		STAT_SET_INT(GET_HASH_KEY("MP1_FIREWORK_TYPE_4_BLUE"), amount, 1);
		*/

		
		char tmpMsg[40];
		sprintf(tmpMsg, "Gave ~b~%i ~w~Fireworks", amount);
		PrintText(tmpMsg, 3000);
		
	}




	// Other Misc
		
		
	// Redesign Character Prompt
	void RedesignCharacterPrompt(int dummy)
	{
		STAT_SET_BOOL(GET_HASH_KEY("MP0_FM_CHANGECHAR_ASKED"), 0, 1);

		PrintText("Character Prompt ~g~Redesigned", 3000);
	}
		

	// Clear All Reports
	void ClearAllReports(int dummy)
	{
		
		STAT_SET_INT(GET_HASH_KEY("MPPLY_REPORT_STRENGTH"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MPPLY_COMMEND_STRENGTH"), 100, 1);
		STAT_SET_INT(GET_HASH_KEY("MPPLY_FRIENDLY"), 100, 1);
		STAT_SET_INT(GET_HASH_KEY("MPPLY_HELPFUL"), 100, 1);
		STAT_SET_INT(GET_HASH_KEY("MPPLY_GRIEFING"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MPPLY_VC_ANNOYINGME"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MPPLY_VC_HATE"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MPPLY_OFFENSIVE_LANGUAGE"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MPPLY_OFFENSIVE_TAGPLATE"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MPPLY_OFFENSIVE_UGC"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MPPLY_BAD_CREW_NAME"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MPPLY_BAD_CREW_MOTTO"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MPPLY_BAD_CREW_STATUS"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MPPLY_BAD_CREW_EMBLEM"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MPPLY_GAME_EXPLOITS"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MPPLY_EXPLOITS"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MPPLY_ISPUNISHED"), 0, 1);

		STAT_SET_INT(GET_HASH_KEY("MP0_TIMES_CHEATED"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_MPPLY_EXPLOITS"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_MPPLY_GAME_EXPLOITS"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_MPPLY_COMMEND_STRENGTH"), 100, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_MPPLY_FRIENDLY"), 100, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_MPPLY_HELPFUL"), 100, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_MPPLY_OFFENSIVE_LANGUAGE"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_MPPLY_VC_HATE"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_MPPLY_VC_ANNOYINGME"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_MPPLY_RACE_CHEAT_TALLY"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_MPPLY_GRIEFING"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_MPPLY_LTS_CHEAT_TALLY"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_MPPLY_SUR_CHEAT_TALLY"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_MPPLY_CAP_CHEAT_TALLY"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_SCADMIN_IS_CHEATER"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_MPPLY_MC_CHEAT_TALLY"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_MPPLY_RACE_CHEAT_TALLY"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_MPPLY_DM_CHEAT_TALLY"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_MPPLY_BECAME_CHEATER_NUM"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_MPPLY_OVERALL_CHEAT"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_MPPLY_WAS_I_CHEATER"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHEAT_BITSET"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_BAD_SPORT_BITSET"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_MPPLY_WAS_I_BAD_SPORT"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_MPPLY_OVERALL_BADSPORT"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_MPPLY_CHAR_IS_BADSPORT"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_MPPLY_BECAME_BADSPORT_NUM"), 0, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_MPPLY_DESTROYED_PVEHICLES"), 0, 1);
		
		PrintText("All Reports ~g~Cleared", 3000);
	}
		
	// Purchase All Weapons
	void PurchaseAllWeapons(int dummy)
	{
		
		STAT_SET_INT(GET_HASH_KEY("MP0_ADMIN_WEAPON_GV_BS_1"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_ADMIN_WEAPON_GV_BS_2"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_ADMIN_WEAPON_GV_BS_3"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_BOTTLE_IN_POSSESSION"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_FM_WEAP_UNLOCKED"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_FM_WEAP_UNLOCKED2"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_WEAP_FM_PURCHASE"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_WEAP_FM_PURCHASE2"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_FM_WEAP_ADDON_1_UNLCK"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_FM_WEAP_ADDON_2_UNLCK"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_FM_WEAP_ADDON_3_UNLCK"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_FM_WEAP_ADDON_4_UNLCK"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_FM_WEAP_ADDON_5_UNLCK"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_WEAP_FM_ADDON_PURCH"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_WEAP_FM_ADDON_PURCH2"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_WEAP_FM_ADDON_PURCH3"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_WEAP_FM_ADDON_PURCH4"), -1, 1);
		STAT_SET_INT(GET_HASH_KEY("MP0_WEAP_FM_ADDON_PURCH5"), -1, 1);
		
		PrintText("All Weapons ~g~Purchased", 3000);
	}
		
	// Bypass Vehicle Sell Timer
	void BypassVehicleSellTimer(int dummy)
	{
		STAT_SET_INT(GET_HASH_KEY("MPPLY_VEHICLE_SELL_TIME"), 0, 1);

		PrintText("Vehicle Sell Timer ~g~Bypassed", 3000);
	}
		
	// Enable Roosevelt In Phone
	void EnableRooseveltInPhone(int dummy)
	{
		STAT_SET_INT(GET_HASH_KEY("MPPLY_VEHICLE_ID_ADMIN_WEB"), 117401876, 1);

		PrintText("Roosevelt In Phone ~g~Enabled", 3000);
	}

	/*
	void RankMP(int rank)
	{
		switch (rank)
		{
			case 1: rankValue = 0;
			break;
			case 120: rankValue = 2165850;
			break;
			case 250: rankValue = 6433100;
			break;
			case 500: rankValue = 17014350;
			break;
			case 750: rankValue = 30720600;
			break;
			case 999: rankValue = 47478300;
			break;
			case 1337: rankValue = 75185850;
			break;
			case 6666: rankValue = 1267016700;
			break;
			case 6969: rankValue = 1377445050;
			break;
			case 8000: rankValue = 1787576850;
			break;
		}
			
		//STAT_GET_INT(GET_HASH_KEY("MP0_CHAR_XP_FM"), 0, -1);
		//STAT_SET_INT(GET_HASH_KEY("MP0_CHAR_XP_FM"), rankValue, true);
		//STAT_SET_INT(GET_HASH_KEY("MP1_CHAR_XP_FM"), rankValue, true);
		//STAT_SET_INT(GET_HASH_KEY("MP2_CHAR_XP_FM"), rankValue, true);
		//STAT_SET_INT(GET_HASH_KEY("MP3_CHAR_XP_FM"), rankValue, true);
		//STAT_SET_INT(GET_HASH_KEY("MP4_CHAR_XP_FM"), rankValue, true);
		
		STAT_INCREMENT(GET_HASH_KEY("MP0_CHAR_XP_FM"), rankValue);

		char rankText[64];
		sprintf(rankText, "~y~Rank Set To: %i", rank);
		PrintText(rankText, 3000);
	}
	*/

	void IncreaseRP(int dummy)
	{
		//STAT_INCREMENT(GET_HASH_KEY("MP0_CHAR_XP_FM"), rankValueModifier);
		STAT_INCREMENT(GET_HASH_KEY("MP0_CHAR_XP_FM"), 100000);
		sleep(250);
		//PrintText("Do Not Use Too Fast or You May Freeze!", 3000);
	}


	void GiveNetworkCash(int amount)
	{
		NETWORK_EARN_FROM_ROCKSTAR(amount);
		char netCashText[48];
		sprintf(netCashText, "Rockstar Gave You ~g~$%i", amount);
		PrintText(netCashText, 3000);
	}


	void Essentials(int dummy)
	{
		// Godmode
		uint currentPlayerU = PLAYER_ID(0);
		int currentPlayer = PLAYER_PED_ID();

		SET_ENTITY_INVINCIBLE(currentPlayerU, true);
		SET_ENTITY_PROOFS(PlayerSelf(), true, true, true, true, true, true, true, true);
		SET_PED_DIES_IN_VEHICLE(currentPlayer, false);
		SET_PED_DIES_IN_WATER(currentPlayer, false);
		SET_PED_DIES_IN_SINKING_VEHICLE(currentPlayer, false);
		SET_ENTITY_CAN_BE_DAMAGED(currentPlayer, false);
		
		SET_PLAYER_INVINCIBLE(currentPlayerU, true);
		SET_PED_CAN_RAGDOLL(currentPlayer, false);
		SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT(currentPlayer, false);
		SET_PLAYER_INVINCIBLE(currentPlayer, true);		
		SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE(currentPlayer, false);
		GIVE_PLAYER_RAGDOLL_CONTROL(currentPlayer, false);
		SET_PED_RAGDOLL_ON_COLLISION(currentPlayer, false);


		// Give All Weapons
		int weapons[58];
		
		weapons[0] = Hashes_Weapons::WEAPON_ADVANCEDRIFLE;
		weapons[1] = Hashes_Weapons::WEAPON_APPISTOL;
		weapons[2] = Hashes_Weapons::WEAPON_ASSAULTRIFLE;
		weapons[3] = Hashes_Weapons::WEAPON_ASSAULTSHOTGUN;
		weapons[4] = Hashes_Weapons::WEAPON_ASSAULTSMG;
		weapons[5] = Hashes_Weapons::WEAPON_BALL;
		weapons[6] = Hashes_Weapons::WEAPON_BAT;
		weapons[7] = Hashes_Weapons::WEAPON_BULLPUPSHOTGUN;
		weapons[8] = Hashes_Weapons::WEAPON_BZGAS;
		weapons[9] = Hashes_Weapons::WEAPON_CARBINERIFLE;
		weapons[10] = Hashes_Weapons::WEAPON_COMBATMG;
		weapons[11] = Hashes_Weapons::WEAPON_COMBATPISTOL;
		weapons[12] = Hashes_Weapons::WEAPON_CROWBAR;
		weapons[13] = Hashes_Weapons::WEAPON_FIREEXTINGUISHER;
		weapons[14] = Hashes_Weapons::WEAPON_FLARE;
		weapons[15] = Hashes_Weapons::WEAPON_GOLFCLUB;
		weapons[16] = Hashes_Weapons::WEAPON_GRENADE;
		weapons[17] = Hashes_Weapons::WEAPON_GRENADELAUNCHER;
		weapons[18] = Hashes_Weapons::WEAPON_GRENADELAUNCHER_SMOKE;
		weapons[19] = Hashes_Weapons::WEAPON_HAMMER;
		weapons[20] = Hashes_Weapons::WEAPON_HEAVYSNIPER;
		weapons[21] = Hashes_Weapons::WEAPON_KNIFE;
		weapons[22] = Hashes_Weapons::WEAPON_MG;
		weapons[23] = Hashes_Weapons::WEAPON_MICROSMG;
		weapons[24] = Hashes_Weapons::WEAPON_MINIGUN;
		weapons[25] = Hashes_Weapons::WEAPON_MOLOTOV;
		weapons[26] = Hashes_Weapons::WEAPON_NIGHTSTICK;
		weapons[27] = Hashes_Weapons::WEAPON_PETROLCAN;
		weapons[28] = Hashes_Weapons::WEAPON_PISTOL;
		weapons[29] = Hashes_Weapons::WEAPON_PISTOL50;
		weapons[30] = Hashes_Weapons::WEAPON_PUMPSHOTGUN;
		weapons[31] = Hashes_Weapons::WEAPON_RPG;
		weapons[32] = Hashes_Weapons::WEAPON_SAWNOFFSHOTGUN;
		weapons[33] = Hashes_Weapons::WEAPON_SMG;
		weapons[34] = Hashes_Weapons::WEAPON_SMOKEGRENADE;
		weapons[35] = Hashes_Weapons::WEAPON_SNIPERRIFLE;
		weapons[36] = Hashes_Weapons::WEAPON_STICKYBOMB;
		weapons[37] = Hashes_Weapons::WEAPON_STINGER;
		weapons[38] = Hashes_Weapons::WEAPON_STUNGUN;
		weapons[39] = Hashes_Weapons_DLC::WEAPON_BOTTLE;
		weapons[40] = Hashes_Weapons_DLC::WEAPON_BULLPUPRIFLE;
		weapons[41] = Hashes_Weapons_DLC::WEAPON_COMBATPDW;
		weapons[42] = Hashes_Weapons_DLC::WEAPON_DAGGER;
		weapons[43] = Hashes_Weapons_DLC::WEAPON_FIREWORK;
		weapons[44] = Hashes_Weapons_DLC::WEAPON_FLAREGUN;
		weapons[45] = Hashes_Weapons_DLC::WEAPON_GUSENBERG;
		weapons[46] = Hashes_Weapons_DLC::WEAPON_HEAVYPISTOL;
		weapons[47] = Hashes_Weapons_DLC::WEAPON_HEAVYSHOTGUN;
		weapons[48] = Hashes_Weapons_DLC::WEAPON_HOMINGLAUNCHER;
		weapons[49] = Hashes_Weapons_DLC::WEAPON_KNUCKLE;
		weapons[50] = Hashes_Weapons_DLC::WEAPON_MARKSMANPISTOL;
		weapons[51] = Hashes_Weapons_DLC::WEAPON_MUSKET;
		weapons[52] = Hashes_Weapons_DLC::WEAPON_PROXMINE;
		weapons[53] = Hashes_Weapons_DLC::WEAPON_SNOWBALL;
		weapons[54] = Hashes_Weapons_DLC::WEAPON_SNSPISTOL;
		weapons[55] = Hashes_Weapons_DLC::WEAPON_SPECIALCARBINE;
		weapons[56] = Hashes_Weapons_DLC::WEAPON_VINTAGEPISTOL;
		weapons[57] = Hashes_Weapons_Gadgets::WEAPON_DIGISCANNER;

		char* name;
		name = GET_PLAYER_NAME(PlayerSelf());

		for (int pos = 0; pos <= 57; pos++)
		{
			GIVE_DELAYED_WEAPON_TO_PED(currentPlayer, weapons[pos], 9999, 1);

			// Infinite Ammo
			SET_PED_INFINITE_AMMO(currentPlayer, true, weapons[pos]);
		}

		
		// Set Default Weapon In-Hand
		SET_PED_GADGET(currentPlayer, Hashes_Weapons_DLC::WEAPON_KNUCKLE, true);


		// Max Health and Armor
		int maxHealth = GET_ENTITY_MAX_HEALTH(currentPlayer);
		SET_ENTITY_HEALTH(currentPlayer, maxHealth);
		SET_PED_ARMOUR(currentPlayer, 100);


		// Disable Wanted Level
		CLEAR_PLAYER_WANTED_LEVEL();
		SET_MAX_WANTED_LEVEL(0);
		SET_POLICE_IGNORE_PLAYER(currentPlayer, true);
		SET_PLAYER_WANTED_LEVEL(currentPlayer, 0, false);
		SET_PLAYER_WANTED_LEVEL_NOW(currentPlayer, false);
		CLEAR_PLAYER_WANTED_LEVEL();

		PrintText("Godmode: ~g~ON ~w~/ Health & Armor: ~g~ON\n~w~Weapons: ~g~ON ~w~/ Inf Ammo: ~g~ON~w~\nCops: ~r~OFF", 5000);

	}



};




#endif


